// JAVA TYPE CASTING WIDENING CASTING

public class Main {
  public static void main(String[] args) {
    int myInt = 9;
    double myDouble = myInt; // Automatic casting: int to double

    System.out.println(myInt);      // Outputs 9
    System.out.println(myDouble);   // Outputs 9.0
  }
}


////NARROWIN CASTING must be done manually

public class Main {
  public static void main(String[] args) {
    double myDouble = 9.78d;
    int myInt = (int) myDouble; // Manual casting: double to int

    System.out.println(myDouble);   // Outputs 9.78
    System.out.println(myInt);      // Outputs 9
  }
}







Arithmetic operators 


Operator	Name			Description					Example	
+		Addition		Adds together two values			x + y	
-		Subtraction		Subtracts one value from another		x - y	
*		Multiplication		Multiplies two values				x * y	
/		Division		Divides one value by another			x / y	
%		Modulus	Returns 	the division remainder				x % y	
++		Increment		Increases the value of a variable by 1		++x	
--		Decrement		Decreases the value of a variable by 1		--x





A list of all assignment operators:

Operator	Example		Same As	
=		x = 5		x = 5	
+=		x += 3		x = x + 3	
-=		x -= 3		x = x - 3	
*=		x *= 3		x = x * 3	
/=		x /= 3		x = x / 3	
%=		x %= 3		x = x % 3	
&=		x &= 3		x = x & 3	
|=		x |= 3		x = x | 3	
^=		x ^= 3		x = x ^ 3	
>>=		x >>= 3		x = x >> 3	
<<=		x <<= 3		x = x << 3


Comparison operators are used to compare two values:

Operator	Name				Example	
==		Equal to			x == y	
!=		Not equal			x != y	
>		Greater than			x > y	
<		Less than			x < y	
>=		Greater than or equal to	x >= y	
<=		Less than or equal to		x <= y


Logical operators are used to determine the logic between variables or values:
Operator	Name		Description							Example	
&& 		Logical and	Returns true if both statements are true			x < 5 &&  x < 10	
|| 		Logical or	Returns true if one of the statements is true			x < 5 || x < 4	
!		Logical not	Reverse the result, returns false if the result is true		!(x < 5 && x < 10)

String Length

String txt = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
System.out.println("The length of the txt string is: " + txt.length());

More String Methods
String txt = "Hello World";
System.out.println(txt.toUpperCase());   // Outputs "HELLO WORLD"
System.out.println(txt.toLowerCase());   // Outputs "hello world"

Finding a Character in a String
String txt = "Please locate where 'locate' occurs!";
System.out.println(txt.indexOf("locate")); // Outputs 7

You can also use the concat() method to concatenate two strings:
String firstName = "John ";
String lastName = "Doe";
System.out.println(firstName.concat(lastName));

Special Characters
Escape character	Result	Description
\'			'	Single quote
\"			"	Double quote
\\			\	Backslash


Other common escape sequences that are valid in Java are:
Code	Result	
\n	New Line	
\r	Carriage Return	
\t	Tab	
\b	Backspace	
\f	Form Feed


		JAVA MATH METHOD
The Math.max(x,y) method can be used to find the highest value of x and y:
Math.max(5, 10);

The Math.min(x,y) method can be used to find the lowest value of x and y:
Math.min(5, 10);

The Math.sqrt(x) method returns the square root of x:
Math.sqrt(64);

The Math.abs(x) method returns the absolute (positive) value of x:
Math.abs(-4.7);

Math.random() returns a random number between 0.0 (inclusive), and 1.0 (exclusive):
Math.random();
To get more control over the random number, e.g. you only want a random number between 0 and 100, you can use the following formula:
int randomNum = (int)(Math.random() * 101);  // 0 to 100



		ELSE IF 
int time = 22;
if (time < 10) {
  System.out.println("Good morning.");
} else if (time < 20) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}
// Outputs "Good evening."




		IF ELSE CUT
int time = 20;
if (time < 18) {
  System.out.println("Good day.");
} else {
  System.out.println("Good evening.");
}

example 
int time = 20;
String result = (time < 18) ? "Good day." : "Good evening.";
System.out.println(result);


		SWITCH EXAMPLE
int day = 4;
switch (day) {
  case 1:
    System.out.println("Monday");
    break;
  case 2:
    System.out.println("Tuesday");
    break;
  case 3:
    System.out.println("Wednesday");
    break;
  case 4:
    System.out.println("Thursday");
    break;
  case 5:
    System.out.println("Friday");
    break;
  case 6:
    System.out.println("Saturday");
    break;
  case 7:
    System.out.println("Sunday");
    break;
}
// Outputs "Thursday" (day 4)



		WHILE
int i = 0;
while (i < 5) {
  System.out.println(i);
  i++;
}



		DO WHILE
int i = 0;
do {
  System.out.println(i);
  i++;
}
while (i < 5);



		FOR LOOP
for (int i = 0; i < 5; i++) {
  System.out.println(i);
}

		EXAMPLE2.
for (int i = 0; i <= 10; i = i + 2) {
  System.out.println(i);
}


		There is also a "for-each" loop, which is used exclusively to loop through elements in an array:

String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (String i : cars) {
  System.out.println(i);
}



		ARRAY

To create an array of integers, you could write:

int[] myNum = {10, 20, 30, 40};


We have now declared a variable that holds an array of strings. To insert values to it, we can use an array literal - place the values in a comma-separated list, inside curly braces:

String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};



To find out how many elements an array has, use the length property:

Example
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
System.out.println(cars.length);
// Outputs 4


	Loop Through an Array
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (int i = 0; i < cars.length; i++) {
  System.out.println(cars[i]);
}

	The following example outputs all elements in the cars array, using a "for-each" loop:
String[] cars = {"Volvo", "BMW", "Ford", "Mazda"};
for (String i : cars) {
  System.out.println(i);
}


	Multidimensional Arrays
int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };

example
int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };
int x = myNumbers[1][2];
System.out.println(x); // Outputs 7


	We can also use a for loop inside another for loop to get the elements of a two-dimensional array (we still have to point to the two indexes):

public class Main {
  public static void main(String[] args) {
    int[][] myNumbers = { {1, 2, 3, 4}, {5, 6, 7} };
    for (int i = 0; i < myNumbers.length; ++i) {
      for(int j = 0; j < myNumbers[i].length; ++j) {
        System.out.println(myNumbers[i][j]);
      }
    }
  }
}








	